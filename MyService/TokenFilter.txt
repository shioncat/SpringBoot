package com.gjun.middleware;

import java.io.IOException;
import java.util.Base64;
import java.util.Base64.Decoder;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

//攔截Basic類型的Authorization 進行驗證

@Component
public class TokenFilter implements Filter{
	

	@Override
	public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain)
			throws IOException, ServletException {
		System.out.println("2. Token 攔截起來...");
		HttpServletRequest request=(HttpServletRequest)req;
		HttpServletResponse response=(HttpServletResponse)resp;
		//參照出Header Authorization
		String token=request.getHeader("Authorization"); //Basic Token是Base64編碼
		
		if(token!=null) {
			//切割字串 basic xxxxxxxx
			String[] items=token.split(" ");
			//Base64 獲取一個decode物件
			Base64.Decoder decorder=Base64.getDecoder();
			byte[] decodeByte=decorder.decode(items[1].getBytes("UTF-8"));
			var txtString=new String(decodeByte,"UTF-8");
			System.out.println(txtString);			
			//切割取出使用者帳號與密碼
			String[] data=txtString.split(":");
			String userid=data[0];
			String password=data[1];
			//進行合法驗證 Database authorization 
			chain.doFilter(request, response);
			
		}		
	}
	@Bean
	public FilterRegistrationBean<TokenFilter> loggingFilter(){
		//建構FilterRegistractionBean物件
		FilterRegistrationBean<TokenFilter> register=
				new FilterRegistrationBean<>();
		//設定Filter
		register.setFilter(new TokenFilter());
		//設定URL Pattern
		register.addUrlPatterns("/iot/*");
		register.addUrlPatterns("/customers/*");
		register.setOrder(2);
		return register;
	}

}
